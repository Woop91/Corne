
/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/backlight.h>
#include <dt-bindings/zmk/rgb.h>
#include <dt-bindings/zmk/ext_power.h>


/ {
        behaviors {
          tp: tap_preferred {
            compatible = "zmk,behavior-hold-tap";
            label = "TAP_PREFERRED";
            #binding-cells = <2>;
            tapping-term-ms = <150>;
            quick-tap-ms = <0>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
          }; 
        };

        keymap {
                compatible = "zmk,keymap";

                default_layer {
// -----------------------------------------------------------------------------------------
// | TAB  |  Q  |  W  |  F  |  P  |    B    |   |  J  |  L   |  U  |  Y  |  ;  | ESC |
// | SHFT |  A  |  R  |  S  |  T  |    G    |   |  M  |  N   |  E  |  I  |  O  |  '   |
// | CTRL |  Z  |  X  |  C  |  D  |    V    |   |  K  |  H   |  ,  |  .  |  /  | ALT |
//                    | RSE | GUI | ALT/ENT |   | HYPER/SPC | BKSP  | LWR |
                        bindings = <
   &kp TAB    &kp Q &kp W &kp F    &kp P &kp B             &kp J &kp L  &kp U     &kp Y   &kp SEMI    &kp ESC
   &kp LSHFT  &kp A &kp R &kp S    &kp T &kp G             &kp M &kp N  &kp E     &kp I   &kp O &tp LC(LS(LALT)) SQT
   &kp LCTRL  &kp Z &kp X &kp C    &kp D &kp V             &kp K &kp H  &kp COMMA &kp DOT &kp FSLH &kp RALT 
                 &mo 1  &kp LGUI  &tp LALT RET             &tp LC(LS(LA(LGUI))) &kp BSPC &mo 2
                        >;
                };

                layer_above {
// -----------------------------------------------------------------------------------------
// |  ~   |  !   |    @    |  #  |  $  |  %     |            | 1  |  2  |  3 | (   |  )  |   \   |
// |  &   |  *   |    _    |  +  |  -  |        |            | 4  |  5  | 6  |   [ |  ]  |  "|"  |  
// |      |PSCRN |         |  *  |     |  =     |            |  7 |  8  | 9  |  {  |  }  |       |
//                         | RSE |  GUI   | ENT |            | HYPER/SPACE | BKSP |  0  |
                        bindings = <
   &kp TILDE  &kp EXCL          &kp AT         &kp HASH           &kp DLLR   &kp PRCNT            &kp N1 &kp N2 &kp N3 &kp LPAR &kp RPAR &kp BSLH
   &kp AMPS   &kp KP_MULTIPLY   &kp UNDER      &kp PLUS           &kp MINUS  &trans               &kp N4 &kp N5 &kp N6 &kp LBKT &kp RBKT &kp PIPE
   &trans     &kp PRINTSCREEN   &kp ALT_ERASE  &kp KP_MULTIPLY    &trans     &kp EQUAL            &kp N7 &kp N8 &kp N9 &kp LBRC &kp RBRC &trans 
                                               &trans             &kp LGUI   &kp RET              &kp SPACE &kp BSPC  &kp N0
                        >;
                };

                layer_below {
// -----------------------------------------------------------------------------------------
// |    |  F1     |  F2      |  F3     |  F4    |  F5     |                   |  F6     |  F7  |  F8  |  F9  |  F10   |   F11  | 
// |    |  BT0    |  BT1     |  BT2    |  BT3   |  BT4    |                   |  PG_up  |  UP  |  LFT |  RGT |        |   F12  |
// |    |  BT_CLR |          |         |  bck   |  FWD    |                   |  PG_dwn |  DWN |  Prev|  Next|  Vol - |  Vol + |
//                           |         |         | rclick |                   |         |  Play/Pause  |        |
                        bindings = <
   &trans     &kp F1           &kp F2          &kp F3           &kp F4           &kp F5                        &kp F6     &kp F7   &kp F8     &kp F9     &kp F10       &kp F11
   &trans     &bt BT_SEL 0     &bt BT_SEL 1    &bt BT_SEL 2     &bt BT_SEL 3     &bt BT_SEL 4                  &kp PG_UP  &kp UP   &kp LEFT   &kp RIGHT  &trans        &kp F12
   &trans     &bt BT_CLR       &trans          &trans           &kp C_AC_BACK    &kp C_AC_FORWARD              &kp PG_DN  &kp DOWN &kp C_PREV &kp C_NEXT &kp C_VOL_DN  &kp C_VOL_UP
                                               &trans           &trans           &kp K_APP                     &trans     &kp C_PP &trans 
                        >;        
                };
        };
};
