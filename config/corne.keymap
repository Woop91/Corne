/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>

/ {
        behaviors {
          tp: tap_preferred {
            compatible = "zmk,behavior-hold-tap";
            label = "TAP_PREFERRED";
            #binding-cells = <2>;
            tapping-term-ms = <150>;
            quick-tap-ms = <0>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
          }; 
        };

        keymap {
                compatible = "zmk,keymap";

                default_layer {
// -----------------------------------------------------------------------------------------
// | TAB  |  Q  |  W  |  F  |  P  |    B    |     |  J         |  L   |  U  |  Y  |  ;  | ESC |
// | CTRL |  A  |  R  |  S  |  T  |    G    |     |  M         |  N   |  E  |  I  |  O  |  '  |
// | SHFT |  Z  |  X  |  C  |  D  |    V    |     |  K         |  H   |  ,  |  .  |  /  | ALT |
//                    | GUI | LWR | ALT/ENT |     | HYPER/SPC  | BKSP | RSE |
                        bindings = <
   &kp TAB   &kp Q &kp W &kp F &kp P &kp B     &kp J &kp L  &kp U     &kp Y   &kp SEMI    &kp ESC
   &kp LCTRL &kp A &kp R &kp S &kp T &kp G     &kp M &kp N  &kp E     &kp I   &kp O &tp LC(LS(LALT)) SQT
   &kp LSHFT &kp Z &kp X &kp C &kp D &kp V     &kp K &kp H  &kp COMMA &kp DOT &kp FSLH &kp RALT 
               &kp LGUI &mo 1 &tp LALT RET     &tp LC(LS(LA(LGUI))) SPACE &kp BSPC &mo 2
                        >;
                };

                layer_below {
// -----------------------------------------------------------------------------------------
// |  ~   |  !  |  @  |  #  |  $  |    %    |           |      1      |  2   |   3  |  (   |  )   |   \   |
// |  &   |  *  |  _  |  +  |  -  |         |           |      4      |  5   |   6  |  [   |  ]   |  "|"  |  
// | SHFT |     |     |  *  |     |    =    |           |      7      |  8   |   9  |  {   |  }   | RSHFT |
//                   | GUI. |     | ALT/ENT |           | HYPER/SPACE | BKSP |   0  |
                        bindings = <
   &kp TILDE    &kp EXCL          &kp AT     &kp HASH           &kp DLLR   &kp PRCNT                    &kp N1                     &kp N2    &kp N3 &kp LPAR &kp RPAR &kp BSLH
   &kp AMPS     &kp KP_MULTIPLY   &kp UNDER  &kp PLUS           &kp MINUS  &trans                       &kp N4                     &kp N5    &kp N6 &kp LBKT &kp RBKT &kp PIPE
   &kp LSHFT    &trans            &trans     &kp KP_MULTIPLY    &trans     &kp EQUAL                    &kp N7                     &kp N8    &kp N9 &kp LBRC &kp RBRC &kp RSHFT
                                             &kp LGUI           &trans     &tp LALT RET                 &tp LC(LS(LA(LGUI))) SPACE &kp BSPC  &kp N0
                        >;
                };

                layer_above {
// -----------------------------------------------------------------------------------------
// |  BTCLR |  F1  |  F2  |  F3  |  F4  |  F5  |            |  F6  |     F7      |  F8  |  F9   |  F10   |       | 
// |        |  BT1 |  BT2 |  BT3 |  BT4 |  BT5 |            |      |     UP      |  LFT |  RGT  |        |       |     
// |        |      |      |      |      |      |            |      |     DWN     | Prev |  Nxt  |  Vol - |  Vol +|
//                        |      |      |      |            |      |  Play/Pause |      |
                        bindings = <
   &bt BT_CLR    &kp F1         &kp F2         &kp F3        &kp F4        &kp F5                &kp F6   &kp F7    &kp F8      &kp F9     &kp F10       &trans
   &trans        &bt BT_SEL 0   &bt BT_SEL 1   &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4          &trans   &kp UP    &kp LEFT    &kp RIGHT  &trans        &trans  
   &trans        &trans         &trans         &trans        &trans        &trans                &trans   &kp DOWN  &kp C_PREV  &kp C_NEXT &kp C_VOL_DN  &kp C_VOL_UP
                                               &trans        &trans        &trans                &trans   &kp C_PP  &trans
                        >;        
                };
        };
};
