
/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/backlight.h>
#include <dt-bindings/zmk/rgb.h>
#include <dt-bindings/zmk/ext_power.h>


/ {
        behaviors {
          tp: tap_preferred {
            compatible = "zmk,behavior-hold-tap";
            label = "TAP_PREFERRED";
            #binding-cells = <2>;
            tapping-term-ms = <150>;
            quick-tap-ms = <0>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
          }; 
        };

        keymap {
                compatible = "zmk,keymap";

                default_layer {
// -----------------------------------------------------------------------------------------
// | TAB  |  Q  |  W  |  F  |  P  |    B    |   |  J  |  L   |  U  |  Y  |  ;  | ESC |
// | SHFT |  A  |  R  |  S  |  T  |    G    |   |  M  |  N   |  E  |  I  |  O  |  '   |
// | CTRL |  Z  |  X  |  C  |  D  |    V    |   |  K  |  H   |  ,  |  .  |  /  | ALT |
//                    |  RSE| GUI | ALT/ENT |   | SPC | BKSP | LWR |
                        bindings = <
   &kp TAB    &kp Q &kp W &kp F    &kp P &kp B             &kp J &kp L  &kp U     &kp Y   &kp SEMI  &kp ESC
   &kp LSHFT  &kp A &kp R &kp S    &kp T &kp G             &kp M &kp N  &kp E     &kp I   &kp O     &kp SQT
   &kp LCTRL  &kp Z &kp X &kp C    &kp D &kp V             &kp K &kp H  &kp COMMA &kp DOT &kp FSLH  &kp RALT 
                  &mo 1 &kp LGUI  &tp LALT RET             &kp SPACE    &kp BSPC  &mo 2
                        >;
                };

                layer_above {
// -----------------------------------------------------------------------------------------
// |  ~   |  !  |  @  |  #  |  $  |  %  |            |  1  |  2  |  3 | (   |  )  |   \   |
// |  &   |     |  _  |  +  |  -  |     |            |  4  |  5  | 6  |   [ |  ]  |  "|"  |  
// |      |     |     |  *  |  %  |  =  |            |  7  |  8  | 9  |  {  |  }  |       |
//                    |  .  |  ,  | ENT |            | SPC | BKSP|  0 |
                        bindings = <
   &kp TILDE  &kp EXCL    &kp AT      &kp HASH          &kp DLLR   &kp PRCNT            &kp N1 &kp N2 &kp N3 &kp LPAR &kp RPAR &kp BSLH
   &kp AMPS   &trans      &kp UNDER   &kp PLUS          &kp MINUS  &none                &kp N4 &kp N5 &kp N6 &kp LBKT &kp RBKT &kp PIPE
   &none      &none       &none       &kp KP_MULTIPLY   &kp PRCNT  &kp EQUAL            &kp N7 &kp N8 &kp N9 &kp LBRC &kp RBRC &trans 
                                      &kp DOT           &kp COMMA  &kp RET              &kp SPACE &kp BSPC  &kp N0


                        >;
                };

                layer_below {
// -----------------------------------------------------------------------------------------
// | BT_CLR |  F1    |  F2    |  F3    |  F4    |  F5     |                  |        |         |   Vol + |     | BRI_UP   | ESC |
// | RGB_TOG|  F6    |  F7    |  F8    |  F9    |  F10    |                  |  Prev  |  Next   |   Vol - |     | BRI_AUTO |     |
// | BL_TOG |  BT_1  |  BT_ 2 |  BT_3  |  BT_4  |  BT_5   |                  |   RW   |  FF     |   MUTE  |     | C_BRI_DN |     |
//                            |  F11   |  F12   |         |                  |        |  PP     |         | 
                        bindings = <
   &bt BT_CLR          &kp F1         &kp F2          &kp F3         &kp F4         &kp F5                &trans       &trans        &kp C_VOL_UP  &trans    &kp C_BRI_UP    &kp ESC             
   &rgb_ug RGB_TOG     &kp F6         &kp F7          &kp F8         &kp F9         &kp F10               &kp C_PREV   &kp C_NEXT    &kp C_VOL_DN  &trans    &kp C_BRI_AUTO  &trans                                          
   &rgb_ug BL_TOG      &bt BT_SEL 0   &bt BT_SEL 1    &bt BT_SEL 2   &bt BT_SEL 3   &bt BT_SEL 4          &kp C_RW     &kp C_FF      &kp C_MUTE    &trans    &kp C_BRI_DN    &trans      
                                                      &kp F11        &kp F12        &trans                &trans       &kp C_PP      &trans      
                        >;        
                };
        };
};
