/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */
//-------------------------------------------------------INCLUDE AREA-----------------------------------------------------------------------------------------------

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

//-------------------------------------------------------COMBO-1-----------------------------------------------------------------------------------------------

/ {
    combos {
        compatible = "zmk,combos";

        Fdel {
            bindings = <&kp DEL>;
            key-positions = <10 11>;
        };

        combo_esc {
            timeout-ms = <50>;
            key-positions = <10 9>;
            bindings = <&kp ESC>;
        };

        combo_money {
            timeout-ms = <50>;
            key-positions = <18 30>;
            bindings = <&kp DLLR>;
        };

        combo_and {
            timeout-ms = <50>;
            key-positions = <13 19>;
            bindings = <&kp AMPERSAND>;
        };

        combo_AT {
            timeout-ms = <50>;
            key-positions = <13 16>;
            bindings = <&kp AT_SIGN>;
        };

        combo_EXCL {
            timeout-ms = <50>;
            key-positions = < 21 22>;
            bindings = <&kp EXCLAMATION>;
        };

        combo_htag {
            timeout-ms = <50>;
            key-positions = < 6 7>;
            bindings = <&kp HASH>;
        };

        combo_qwerty {
            timeout-ms = <50>;
            key-positions = <1 2 3 4 >;
            bindings = <&tog 3 CLCK>;
        };

        combo_BC {
            timeout-ms = <50>;
            key-positions = <15 14>;
            bindings = <&kp LEFT_PARENTHESIS>;
        };

        combo_BB {
            timeout-ms = <50>;
            key-positions = <20 21>;
            bindings = <&kp RIGHT_PARENTHESIS>;
        };

        combo_fnbt {
            timeout-ms = <50>;
            key-positions = <7 8 9 10>;
            bindings = <&mo 4>;
        };

        Talt {
            bindings = <&kp LEFT_ALT>;
            key-positions = <40 39>;
        };

        Deltl {
            bindings = <&kp BACKSPACE>;
            key-positions = <19 20>;
        };

        Ente {
            bindings = <&kp SINGLE_QUOTE>;
            key-positions = <18 19>;
        };

        Fdel2 {
            bindings = <&kp DEL>;
            key-positions = <18 19 20>;
        };

        Div {
            bindings = <&kp DQT>;
            key-positions = <7 6>;
        };

        Ctrltmb {
            bindings = <&kp LEFT_CONTROL>;
            key-positions = <37 38>;
     
        };

        Trial4 {
            bindings = <&bootloader>;
            key-positions = <>;
        };

        eqls {
            bindings = <&kp KP_EQUAL>;
            key-positions = <15 16 14>;
        };

        plus {
            bindings = <&kp KP_PLUS>;
            key-positions = <21 20 19>;
        };

        slash {
            bindings = <&kp KP_DIVIDE>;
            key-positions = <4 5>;
        };

        equals2 {
            bindings = <&kp EQUAL>;
            key-positions = <28 29>;
        };

        lcontrol {
            bindings = <&kp LEFT_CONTROL>;
            key-positions = <25 26>;
        };

        lcaps {
            bindings = <&kp CAPS>;
            key-positions = <13 14>;
        };

        ltab {
            bindings = <&kp TAB>;
            key-positions = <1 2>;
        };

        dquotes {
            bindings = <&kp DOUBLE_QUOTES>;
            key-positions = <16 17>;
        };

        blank {
            bindings = <&kp TAB>;
            key-positions = <3 4>;
        };

        blank2 {
            bindings = <&kp CAPSLOCK>;
            key-positions = <15 16>;
        };

        blank3 {
            bindings = <&kp LEFT_CONTROL>;
            key-positions = <28 27>;
        };

        blank4 {
            bindings = <&kp NUMBER_3>;
            key-positions = <18 19>;
        };
    };
};


#define AS(keycode) &as LS(keycode) keycode

/ {
    chosen {
      zmk,matrix_transform = &five_column_transform;
    };

    behaviors {
        tp: tap_preferred {
            compatible = "zmk,behavior-hold-tap";
            label = "TAP_PREFERRED";
            #binding-cells = <2>;
            tapping-term-ms = <150>;
            quick-tap-ms = <0>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
        };
    };
        keymap {
                compatible = "zmk,keymap";

                default_layer {
// -----------------------------------------------------------------------------------------
// |  Q  |  W  |  E  |  R  |  T  |     |  Y  |  U   |  I   |  O   | P |
// |  A  |  S  |  D  |  F  |  G  |     |  H  |  J   |  K   |  L   | ' | 
// |  Z  |  X  |  C  |  V  |  B  |     |  N  |  M   | CTRL | META | . |
//             | GUI | LWR | SPC |     | ENT | RSE  | BSPC |
                        display-name = "Base";
                        bindings = <
   AS(Q) AS(W) AS(E) AS(R) AS(T)     AS(Y)   AS(U)  AS(I)     AS(O)     AS(P)
   AS(A) AS(S) AS(D) AS(F) AS(G)     AS(H)   AS(J)  AS(K)     AS(L)     AS(SQT)
   AS(Z) AS(X) AS(C) AS(V) AS(B)     AS(N)   AS(M)  &kp LCTL  &kp RALT  AS(DOT)
        &kp LGUI &mo 1 &kp SPACE     AS(RET) &mo 2  &kp BSPC
                        >;
                };

                lower_layer {
// -----------------------------------------------------------------------------------------
// | !     |  @  |  #  |  $  |  %  |     |  ^  |  &  |  *  |  (  |  )  |
// | BT1   | BT2 | BT3 | BT4 | BT5 |     | LFT | DWN |  UP | RGT |     |
// | BTCLR |     |     |     |     |     |     |     |     |     |     |
//               | GUI |     | SPC |     | ENT | ESC | TAB |
                        display-name = "Lower";
                        bindings = <
   &kp EXCL     &kp AT       &kp HASH     &kp DLLR     &kp PRCNT        &kp CARET &kp AMPS  &kp KP_MULTIPLY &kp LPAR  &kp RPAR
   &bt BT_SEL 0 &bt BT_SEL 1 &bt BT_SEL 2 &bt BT_SEL 3 &bt BT_SEL 4     &kp LEFT  &kp DOWN  &kp UP          &kp RIGHT &trans 
   &bt BT_CLR   &trans       &trans       &trans       &trans           &trans    &trans    &trans          &trans    &trans 
                             &kp LGUI     &trans       &kp SPACE        AS(RET)   &kp ESC   &kp TAB
                        >;
                };

                raise_layer {
// -----------------------------------------------------------------------------------------
// | 1! |  2@ |  3# |  4$ |  5% |     |  6^ |  7& |  8* |  9(  |  0)  |
// | -_ |  =+ |  {  |  [  |  (  |     |  )  |  ]  |  }  |  /?  |  \|  |
// | `~ |     |     |  ,< |  :  |     |  ;  |  .> | CTRL| META |      |
//            | GUI | ESC | SPC |     | ENT |     | TAB |
                        display-name = "Raise";
                        bindings = <

   AS(N1)    AS(N2)    AS(N3)    AS(N4)    AS(N5)        AS(N6)    AS(N7)    AS(N8)    AS(N9)   AS(N0)
   AS(MINUS) AS(EQUAL) &kp LBRC  &kp LBKT  &kp LPAR      &kp RPAR  &kp RBKT  &kp RBRC  AS(FSLH) AS(BSLH)
   AS(GRAVE) &trans    &trans    AS(COMMA) &kp COLON     &kp SEMI  AS(DOT)   &kp LCTRL &kp RALT &trans
                       &kp LGUI  &kp ESC   &kp SPACE     AS(RET)   &trans    &kp TAB
                        >;
                };
        };
};
                        
                
        
